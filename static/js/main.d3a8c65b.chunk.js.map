{"version":3,"sources":["utils/utils.ts","components/Todo.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["URL","loadTodos","a","fetch","then","response","json","loadUsers","Todo","todo","className","id","title","user","name","completed","TodoList","props","todos","onClickSortButton","type","onClick","map","key","App","useState","isLoading","setIsLoading","isError","setIsError","setTodos","length","option","newTodos","sort","item1","item2","localeCompare","Number","b","Promise","all","todosFromApi","usersFromApi","preparedTodos","find","person","userId","catch","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3a8c65b.chunk.js","sourcesContent":["import { Todo, User } from './types';\n\nconst URL = 'https://jsonplaceholder.typicode.com/';\n\nexport async function loadData<T>(url: string): Promise<T> {\n  return fetch(url)\n    .then(response => response.json());\n}\n\nexport async function loadTodos(): Promise<Todo[]> {\n  return fetch(`${URL}todos`)\n    .then(response => response.json());\n}\n\nexport async function loadUsers(): Promise<User[]> {\n  return fetch(`${URL}users`)\n    .then(response => response.json());\n}\n","import React, { FC } from 'react';\nimport { TodoWithUser } from '../utils/types';\n\ninterface Props {\n  todo: TodoWithUser;\n}\n\nexport const Todo: FC<Props> = ({ todo }) => (\n  <tr>\n    <td className=\"cell\">{todo.id}</td>\n    <td className=\"cell\">{todo.title}</td>\n    <td className=\"cell\">{todo.user ? todo.user.name : ' - '}</td>\n    <td className=\"cell\">{todo.completed ? 'pending' : 'completed'}</td>\n  </tr>\n);\n","import React, { FC } from 'react';\n\nimport { Todo } from './Todo';\nimport { TodoWithUser } from '../utils/types';\n\ninterface Props {\n  todos: TodoWithUser[];\n  onClickSortButton(option: string): void;\n}\n\nexport const TodoList: FC<Props> = (props) => {\n  const {\n    todos,\n    onClickSortButton,\n  } = props;\n\n  return (\n    <table className=\"todo__table\">\n      <thead>\n        <tr>\n          <th className=\"table__title\">\n            <button\n              type=\"button\"\n              onClick={() => onClickSortButton('ID')}\n              className=\"table__button\"\n            >\n              number task\n            </button>\n          </th>\n          <th className=\"table__title\">\n            <button\n              type=\"button\"\n              onClick={() => onClickSortButton('title')}\n              className=\"table__button\"\n            >\n              Title\n            </button>\n          </th>\n          <th className=\"table__title\">\n            <button\n              type=\"button\"\n              onClick={() => onClickSortButton('name')}\n              className=\"table__button\"\n            >\n              Name\n            </button>\n          </th>\n          <th className=\"table__title\">\n            <button\n              type=\"button\"\n              onClick={() => onClickSortButton('condition')}\n              className=\"table__button\"\n            >\n              Condition\n            </button>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {todos.map(todo => <Todo key={todo.id} todo={todo} />)}\n      </tbody>\n    </table>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport './App.css';\n\nimport { loadTodos, loadUsers } from './utils/utils';\nimport { TodoWithUser } from './utils/types';\nimport { TodoList } from './components/TodoList';\n\nconst App: FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState('');\n  const [todos, setTodos] = useState<TodoWithUser[]>([]);\n\n  const clickHandler = () => {\n    setIsLoading(true);\n    Promise.all([\n      loadTodos(),\n      loadUsers(),\n    ])\n      .then(([todosFromApi, usersFromApi]) => {\n        const preparedTodos = todosFromApi.map(todo => {\n          const user = usersFromApi.find(person => todo.userId === person.id);\n\n          return { ...todo, user };\n        });\n\n        setTodos(preparedTodos);\n        setIsLoading(false);\n      })\n      .catch(() => {\n        setIsError('Download error, try again.');\n        setIsLoading(false);\n      });\n  };\n\n  function handlerSort(option: string): void {\n    switch (option) {\n      case 'title': {\n        const newTodos = [...todos];\n\n        setTodos(newTodos.sort((item1, item2) => item1.title.localeCompare(item2.title)));\n        break;\n      }\n\n      case 'ID': {\n        const newTodos = [...todos];\n\n        setTodos(newTodos.sort((item1, item2) => item1.id - item2.id));\n        break;\n      }\n\n      case 'condition': {\n        const newTodos = [...todos];\n\n        setTodos(newTodos.sort((item1, item2) => (\n          Number(item1.completed) - Number(item2.completed)\n        )));\n        break;\n      }\n\n      case 'name': {\n        const newTodos = [...todos];\n\n        setTodos(newTodos.sort((item1, item2) => {\n          const a = item1.user ? item1.user.name : '';\n          const b = item2.user ? item2.user.name : '';\n\n          return a.localeCompare(b);\n        }));\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n  }\n\n  if (!todos.length) {\n    return (\n      <>\n        <h1>Dynamic list of TODOs</h1>\n        <button\n          type=\"button\"\n          onClick={clickHandler}\n          disabled={isLoading}\n        >\n          load data\n        </button>\n        <p>{isLoading ? 'Loading...' : ''}</p>\n        <p>{isError || ''}</p>\n      </>\n    );\n  }\n\n  return (\n    <TodoList\n      todos={todos}\n      onClickSortButton={handlerSort}\n    />\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}